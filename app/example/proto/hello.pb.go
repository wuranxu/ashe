// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hello.proto

package hello

import (
	protocol "ashe/protocol"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Body struct {
	Expect               string   `protobuf:"bytes,1,opt,name=expect,proto3" json:"expect,omitempty"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Body) Reset()         { *m = Body{} }
func (m *Body) String() string { return proto.CompactTextString(m) }
func (*Body) ProtoMessage()    {}
func (*Body) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{0}
}

func (m *Body) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Body.Unmarshal(m, b)
}
func (m *Body) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Body.Marshal(b, m, deterministic)
}
func (m *Body) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Body.Merge(m, src)
}
func (m *Body) XXX_Size() int {
	return xxx_messageInfo_Body.Size(m)
}
func (m *Body) XXX_DiscardUnknown() {
	xxx_messageInfo_Body.DiscardUnknown(m)
}

var xxx_messageInfo_Body proto.InternalMessageInfo

func (m *Body) GetExpect() string {
	if m != nil {
		return m.Expect
	}
	return ""
}

func (m *Body) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Body) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AssertResult struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssertResult) Reset()         { *m = AssertResult{} }
func (m *AssertResult) String() string { return proto.CompactTextString(m) }
func (*AssertResult) ProtoMessage()    {}
func (*AssertResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_61ef911816e0a8ce, []int{1}
}

func (m *AssertResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssertResult.Unmarshal(m, b)
}
func (m *AssertResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssertResult.Marshal(b, m, deterministic)
}
func (m *AssertResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssertResult.Merge(m, src)
}
func (m *AssertResult) XXX_Size() int {
	return xxx_messageInfo_AssertResult.Size(m)
}
func (m *AssertResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AssertResult.DiscardUnknown(m)
}

var xxx_messageInfo_AssertResult proto.InternalMessageInfo

func (m *AssertResult) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *AssertResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Body)(nil), "Body")
	proto.RegisterType((*AssertResult)(nil), "AssertResult")
}

func init() { proto.RegisterFile("hello.proto", fileDescriptor_61ef911816e0a8ce) }

var fileDescriptor_61ef911816e0a8ce = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8e, 0x3f, 0xaf, 0x82, 0x30,
	0x14, 0xc5, 0x1f, 0xf0, 0x5e, 0xf3, 0xbc, 0x32, 0x68, 0x07, 0x42, 0x88, 0x83, 0x61, 0x72, 0xc2,
	0x7f, 0x8b, 0xab, 0x4e, 0xcc, 0xf5, 0x13, 0x20, 0xde, 0x88, 0x49, 0xb5, 0xd8, 0x5b, 0x8c, 0x7e,
	0x7b, 0x43, 0x8b, 0xc4, 0xd1, 0xed, 0xfc, 0x7e, 0xed, 0x69, 0x0f, 0x0c, 0x2b, 0x94, 0x52, 0x65,
	0xb5, 0x56, 0x46, 0x25, 0x93, 0x82, 0x2a, 0x9c, 0xdb, 0x5c, 0x2a, 0xd9, 0x07, 0x77, 0x9a, 0xe6,
	0xf0, 0xbb, 0x53, 0xc7, 0x27, 0x8f, 0x80, 0xe1, 0xa3, 0xc6, 0xd2, 0xc4, 0xde, 0xd4, 0x9b, 0x0d,
	0x44, 0x47, 0xad, 0xd7, 0x48, 0x8d, 0x34, 0xb1, 0xef, 0xbc, 0x23, 0x3e, 0x82, 0xe0, 0x42, 0xa7,
	0x38, 0xb0, 0xb2, 0x8d, 0xe9, 0x06, 0xc2, 0x2d, 0x11, 0x6a, 0x23, 0xdc, 0x8d, 0x08, 0x18, 0x99,
	0xc2, 0x34, 0x64, 0x5f, 0xfc, 0x17, 0x1d, 0xbd, 0x9b, 0x7e, 0xdf, 0x5c, 0x11, 0x84, 0x79, 0x3b,
	0x78, 0x8f, 0xfa, 0x7e, 0x2e, 0x91, 0x2f, 0xe0, 0xcf, 0x32, 0x1f, 0x67, 0xfd, 0x5a, 0x81, 0xb7,
	0x06, 0xc9, 0x24, 0xfc, 0x53, 0x51, 0xad, 0xae, 0x84, 0xe9, 0x0f, 0x5f, 0x02, 0x73, 0x7f, 0x7f,
	0x5d, 0x39, 0x30, 0x2b, 0xd7, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0x6a, 0x03, 0x77, 0x2c,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	Hello(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
	Assert(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Hello(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/HelloService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) Assert(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/HelloService/Assert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	Hello(context.Context, *protocol.Request) (*protocol.Response, error)
	Assert(context.Context, *protocol.Request) (*protocol.Response, error)
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) Hello(ctx context.Context, req *protocol.Request) (*protocol.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloServiceServer) Assert(ctx context.Context, req *protocol.Request) (*protocol.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assert not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_Assert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Assert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HelloService/Assert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Assert(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
		{
			MethodName: "Assert",
			Handler:    _HelloService_Assert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
