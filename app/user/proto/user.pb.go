// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package proto // import "ashe/app/user/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protocol "ashe/protocol"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	// 注册用户
	Register(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
	Login(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
	Edit(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
	InsertUserLog(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Register(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/user/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/user/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Edit(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/user/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) InsertUserLog(ctx context.Context, in *protocol.Request, opts ...grpc.CallOption) (*protocol.Response, error) {
	out := new(protocol.Response)
	err := c.cc.Invoke(ctx, "/user/InsertUserLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	// 注册用户
	Register(context.Context, *protocol.Request) (*protocol.Response, error)
	Login(context.Context, *protocol.Request) (*protocol.Response, error)
	Edit(context.Context, *protocol.Request) (*protocol.Response, error)
	InsertUserLog(context.Context, *protocol.Request) (*protocol.Response, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Register(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Edit(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_InsertUserLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protocol.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).InsertUserLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user/InsertUserLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).InsertUserLog(ctx, req.(*protocol.Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _User_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _User_Edit_Handler,
		},
		{
			MethodName: "InsertUserLog",
			Handler:    _User_InsertUserLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_9aaad531af6dde49) }

var fileDescriptor_user_9aaad531af6dde49 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x92, 0x49, 0x2c, 0xce, 0x48, 0xd5, 0x07, 0xb3, 0x93,
	0xf3, 0x73, 0xe0, 0x0c, 0x88, 0xac, 0xd1, 0x0d, 0x46, 0x2e, 0x16, 0x90, 0x62, 0x21, 0x63, 0x2e,
	0x8e, 0xa0, 0xd4, 0xf4, 0xcc, 0xe2, 0x92, 0xd4, 0x22, 0x21, 0x41, 0x3d, 0xb8, 0xaa, 0xa0, 0xd4,
	0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x21, 0x64, 0xa1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25,
	0x06, 0x21, 0x03, 0x2e, 0x56, 0x9f, 0xfc, 0xf4, 0xcc, 0x3c, 0xe2, 0x75, 0xe8, 0x73, 0xb1, 0xb8,
	0xa6, 0x64, 0x96, 0x10, 0xaf, 0xc1, 0x82, 0x8b, 0xd7, 0x33, 0xaf, 0x38, 0xb5, 0xa8, 0x24, 0xb4,
	0x38, 0xb5, 0xc8, 0x27, 0x3f, 0x9d, 0x68, 0x9d, 0x4e, 0xa2, 0x51, 0xc2, 0x60, 0xaf, 0x27, 0x16,
	0x14, 0xe8, 0x83, 0xbc, 0x08, 0xf1, 0x7a, 0x12, 0x1b, 0x98, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0x1b, 0x7d, 0xa3, 0x24, 0x01, 0x00, 0x00,
}
